{"version":3,"file":"static/js/vendors-node_modules_solana_web3_js_lib_index_browser_esm_js.e8d7036e.chunk.js","mappings":"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","sources":["../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/transaction-constants.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/util/bigint.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../src/compute-budget.ts","../../node_modules/fast-stable-stringify/index.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/util/tx-expiry-custom-errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const newOpts = opts as TransactionBlockhashCtor;\n      Object.assign(this, newOpts);\n      this.recentBlockhash = newOpts.blockhash;\n      this.lastValidBlockHeight = newOpts.lastValidBlockHeight;\n    } else {\n      const oldOpts = opts as TransactionCtorFields_DEPRECATED;\n      Object.assign(this, oldOpts);\n      this.recentBlockhash = oldOpts.recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const checkBlockHeight = async () => {\n      try {\n        const blockHeight = await this.getBlockHeight(commitment);\n        return blockHeight;\n      } catch (_e) {\n        return -1;\n      }\n    };\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","l","r","Object","create","inherits_browserModule","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","length","htonl","w","zero2","word","zero8","utils","enc","Array","isArray","slice","res","replace","push","parseInt","p","c","toString","endian","start","end","len","k","m","b","a","d","e","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","BlockHash","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","call","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","sha","require$$4","sum32_3","RIPEMD160","j","K","Kh","ripemd","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","exports","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_normalizeError","missing","forEach","form","normalize","join","String","fromCharCode","message","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","arguments","isInteger","arrayify","options","result","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","map","Map","MAX_SEED_LENGTH","PublicKey","_bn","undefined","isPublicKeyData","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","default","set","fields","naclLowLevel","nacl","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","property","BufferLayout","rustString","rsl","_decode","decode","bind","_encode","rslShim","offset","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","from","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","pubkey","isSigner","isWritable","Transaction","signature","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","newOpts","blockhash","oldOpts","nonceInstruction","signers","add","items","item","compileMessage","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","sign","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","layout","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","u64","blob","encodeDecode","bigIntLayout","src","toBigIntLE","bigInt","toBufferLE","SystemInstruction","checkProgramId","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","authorized","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","BigInt","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","ceil","chunkSize","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","units","additionalFee","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","objToString","objKeys","obj","isArrayProp","max","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","globalThis","fetch","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","URL","protocol","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","confirmTransactionInitialTimeout","useHttps","host","port","Number","makeWebsocketUrl","customFetch","fetchImpl","fetchWithMiddleware","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","response","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","extra","encoding","filters","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","checkBlockHeight","getBlockHeight","_e","expiryPromise","timeoutMs","TIMED_OUT","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","clearTimeout","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","rest","block","endSlot","transactionDetails","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","originalTx","_blockhashWithExpiryBlockHeight","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","PRIVATE_KEY_BYTES","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","lockup","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","splitInstruction","publicKeyCreate","ecdsaSign","secp256k1","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ETHEREUM_ADDRESS_BYTES","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","voteInit","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sourceRoot":""}