{"version":3,"file":"static/js/546.72fbf283.chunk.js","mappings":"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","sources":["../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js","../node_modules/tweetnacl/nacl-fast.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\nconst BigNumber = require(\"bignumber.js\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    const n = new BigNumber(roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision)));\n    return n.toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.6\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n","(function(nacl) {\n'use strict';\n\n// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n//\n// Implementation derived from TweetNaCl version 20140427.\n// See for details: http://tweetnacl.cr.yp.to/\n\nvar gf = function(init) {\n  var i, r = new Float64Array(16);\n  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\n  return r;\n};\n\n//  Pluggable, initialized in high-level API below.\nvar randombytes = function(/* x, n */) { throw new Error('no PRNG'); };\n\nvar _0 = new Uint8Array(16);\nvar _9 = new Uint8Array(32); _9[0] = 9;\n\nvar gf0 = gf(),\n    gf1 = gf([1]),\n    _121665 = gf([0xdb41, 1]),\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\n    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),\n    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),\n    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction ts64(x, i, h, l) {\n  x[i]   = (h >> 24) & 0xff;\n  x[i+1] = (h >> 16) & 0xff;\n  x[i+2] = (h >>  8) & 0xff;\n  x[i+3] = h & 0xff;\n  x[i+4] = (l >> 24)  & 0xff;\n  x[i+5] = (l >> 16)  & 0xff;\n  x[i+6] = (l >>  8)  & 0xff;\n  x[i+7] = l & 0xff;\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i,d = 0;\n  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction crypto_verify_16(x, xi, y, yi) {\n  return vn(x,xi,y,yi,16);\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x,xi,y,yi,32);\n}\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n   x0 =  x0 +  j0 | 0;\n   x1 =  x1 +  j1 | 0;\n   x2 =  x2 +  j2 | 0;\n   x3 =  x3 +  j3 | 0;\n   x4 =  x4 +  j4 | 0;\n   x5 =  x5 +  j5 | 0;\n   x6 =  x6 +  j6 | 0;\n   x7 =  x7 +  j7 | 0;\n   x8 =  x8 +  j8 | 0;\n   x9 =  x9 +  j9 | 0;\n  x10 = x10 + j10 | 0;\n  x11 = x11 + j11 | 0;\n  x12 = x12 + j12 | 0;\n  x13 = x13 + j13 | 0;\n  x14 = x14 + j14 | 0;\n  x15 = x15 + j15 | 0;\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x1 >>>  0 & 0xff;\n  o[ 5] = x1 >>>  8 & 0xff;\n  o[ 6] = x1 >>> 16 & 0xff;\n  o[ 7] = x1 >>> 24 & 0xff;\n\n  o[ 8] = x2 >>>  0 & 0xff;\n  o[ 9] = x2 >>>  8 & 0xff;\n  o[10] = x2 >>> 16 & 0xff;\n  o[11] = x2 >>> 24 & 0xff;\n\n  o[12] = x3 >>>  0 & 0xff;\n  o[13] = x3 >>>  8 & 0xff;\n  o[14] = x3 >>> 16 & 0xff;\n  o[15] = x3 >>> 24 & 0xff;\n\n  o[16] = x4 >>>  0 & 0xff;\n  o[17] = x4 >>>  8 & 0xff;\n  o[18] = x4 >>> 16 & 0xff;\n  o[19] = x4 >>> 24 & 0xff;\n\n  o[20] = x5 >>>  0 & 0xff;\n  o[21] = x5 >>>  8 & 0xff;\n  o[22] = x5 >>> 16 & 0xff;\n  o[23] = x5 >>> 24 & 0xff;\n\n  o[24] = x6 >>>  0 & 0xff;\n  o[25] = x6 >>>  8 & 0xff;\n  o[26] = x6 >>> 16 & 0xff;\n  o[27] = x6 >>> 24 & 0xff;\n\n  o[28] = x7 >>>  0 & 0xff;\n  o[29] = x7 >>>  8 & 0xff;\n  o[30] = x7 >>> 16 & 0xff;\n  o[31] = x7 >>> 24 & 0xff;\n\n  o[32] = x8 >>>  0 & 0xff;\n  o[33] = x8 >>>  8 & 0xff;\n  o[34] = x8 >>> 16 & 0xff;\n  o[35] = x8 >>> 24 & 0xff;\n\n  o[36] = x9 >>>  0 & 0xff;\n  o[37] = x9 >>>  8 & 0xff;\n  o[38] = x9 >>> 16 & 0xff;\n  o[39] = x9 >>> 24 & 0xff;\n\n  o[40] = x10 >>>  0 & 0xff;\n  o[41] = x10 >>>  8 & 0xff;\n  o[42] = x10 >>> 16 & 0xff;\n  o[43] = x10 >>> 24 & 0xff;\n\n  o[44] = x11 >>>  0 & 0xff;\n  o[45] = x11 >>>  8 & 0xff;\n  o[46] = x11 >>> 16 & 0xff;\n  o[47] = x11 >>> 24 & 0xff;\n\n  o[48] = x12 >>>  0 & 0xff;\n  o[49] = x12 >>>  8 & 0xff;\n  o[50] = x12 >>> 16 & 0xff;\n  o[51] = x12 >>> 24 & 0xff;\n\n  o[52] = x13 >>>  0 & 0xff;\n  o[53] = x13 >>>  8 & 0xff;\n  o[54] = x13 >>> 16 & 0xff;\n  o[55] = x13 >>> 24 & 0xff;\n\n  o[56] = x14 >>>  0 & 0xff;\n  o[57] = x14 >>>  8 & 0xff;\n  o[58] = x14 >>> 16 & 0xff;\n  o[59] = x14 >>> 24 & 0xff;\n\n  o[60] = x15 >>>  0 & 0xff;\n  o[61] = x15 >>>  8 & 0xff;\n  o[62] = x15 >>> 16 & 0xff;\n  o[63] = x15 >>> 24 & 0xff;\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x5 >>>  0 & 0xff;\n  o[ 5] = x5 >>>  8 & 0xff;\n  o[ 6] = x5 >>> 16 & 0xff;\n  o[ 7] = x5 >>> 24 & 0xff;\n\n  o[ 8] = x10 >>>  0 & 0xff;\n  o[ 9] = x10 >>>  8 & 0xff;\n  o[10] = x10 >>> 16 & 0xff;\n  o[11] = x10 >>> 24 & 0xff;\n\n  o[12] = x15 >>>  0 & 0xff;\n  o[13] = x15 >>>  8 & 0xff;\n  o[14] = x15 >>> 16 & 0xff;\n  o[15] = x15 >>> 24 & 0xff;\n\n  o[16] = x6 >>>  0 & 0xff;\n  o[17] = x6 >>>  8 & 0xff;\n  o[18] = x6 >>> 16 & 0xff;\n  o[19] = x6 >>> 24 & 0xff;\n\n  o[20] = x7 >>>  0 & 0xff;\n  o[21] = x7 >>>  8 & 0xff;\n  o[22] = x7 >>> 16 & 0xff;\n  o[23] = x7 >>> 24 & 0xff;\n\n  o[24] = x8 >>>  0 & 0xff;\n  o[25] = x8 >>>  8 & 0xff;\n  o[26] = x8 >>> 16 & 0xff;\n  o[27] = x8 >>> 24 & 0xff;\n\n  o[28] = x9 >>>  0 & 0xff;\n  o[29] = x9 >>>  8 & 0xff;\n  o[30] = x9 >>> 16 & 0xff;\n  o[31] = x9 >>> 24 & 0xff;\n}\n\nfunction crypto_core_salsa20(out,inp,k,c) {\n  core_salsa20(out,inp,k,c);\n}\n\nfunction crypto_core_hsalsa20(out,inp,k,c) {\n  core_hsalsa20(out,inp,k,c);\n}\n\nvar sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);\n            // \"expand 32-byte k\"\n\nfunction crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n    mpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream_salsa20(c,cpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream(c,cpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20(c,cpos,d,sn,s);\n}\n\nfunction crypto_stream_xor(c,cpos,m,mpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);\n}\n\n/*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/\n\nvar poly1305 = function(key) {\n  this.buffer = new Uint8Array(16);\n  this.r = new Uint16Array(10);\n  this.h = new Uint16Array(10);\n  this.pad = new Uint16Array(8);\n  this.leftover = 0;\n  this.fin = 0;\n\n  var t0, t1, t2, t3, t4, t5, t6, t7;\n\n  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;\n  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;\n  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;\n  this.r[5] = ((t4 >>>  1)) & 0x1ffe;\n  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;\n  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n  this.r[9] = ((t7 >>>  5)) & 0x007f;\n\n  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n};\n\npoly1305.prototype.blocks = function(m, mpos, bytes) {\n  var hibit = this.fin ? 0 : (1 << 11);\n  var t0, t1, t2, t3, t4, t5, t6, t7, c;\n  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n\n  var h0 = this.h[0],\n      h1 = this.h[1],\n      h2 = this.h[2],\n      h3 = this.h[3],\n      h4 = this.h[4],\n      h5 = this.h[5],\n      h6 = this.h[6],\n      h7 = this.h[7],\n      h8 = this.h[8],\n      h9 = this.h[9];\n\n  var r0 = this.r[0],\n      r1 = this.r[1],\n      r2 = this.r[2],\n      r3 = this.r[3],\n      r4 = this.r[4],\n      r5 = this.r[5],\n      r6 = this.r[6],\n      r7 = this.r[7],\n      r8 = this.r[8],\n      r9 = this.r[9];\n\n  while (bytes >= 16) {\n    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;\n    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;\n    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;\n    h5 += ((t4 >>>  1)) & 0x1fff;\n    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;\n    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n    h9 += ((t7 >>> 5)) | hibit;\n\n    c = 0;\n\n    d0 = c;\n    d0 += h0 * r0;\n    d0 += h1 * (5 * r9);\n    d0 += h2 * (5 * r8);\n    d0 += h3 * (5 * r7);\n    d0 += h4 * (5 * r6);\n    c = (d0 >>> 13); d0 &= 0x1fff;\n    d0 += h5 * (5 * r5);\n    d0 += h6 * (5 * r4);\n    d0 += h7 * (5 * r3);\n    d0 += h8 * (5 * r2);\n    d0 += h9 * (5 * r1);\n    c += (d0 >>> 13); d0 &= 0x1fff;\n\n    d1 = c;\n    d1 += h0 * r1;\n    d1 += h1 * r0;\n    d1 += h2 * (5 * r9);\n    d1 += h3 * (5 * r8);\n    d1 += h4 * (5 * r7);\n    c = (d1 >>> 13); d1 &= 0x1fff;\n    d1 += h5 * (5 * r6);\n    d1 += h6 * (5 * r5);\n    d1 += h7 * (5 * r4);\n    d1 += h8 * (5 * r3);\n    d1 += h9 * (5 * r2);\n    c += (d1 >>> 13); d1 &= 0x1fff;\n\n    d2 = c;\n    d2 += h0 * r2;\n    d2 += h1 * r1;\n    d2 += h2 * r0;\n    d2 += h3 * (5 * r9);\n    d2 += h4 * (5 * r8);\n    c = (d2 >>> 13); d2 &= 0x1fff;\n    d2 += h5 * (5 * r7);\n    d2 += h6 * (5 * r6);\n    d2 += h7 * (5 * r5);\n    d2 += h8 * (5 * r4);\n    d2 += h9 * (5 * r3);\n    c += (d2 >>> 13); d2 &= 0x1fff;\n\n    d3 = c;\n    d3 += h0 * r3;\n    d3 += h1 * r2;\n    d3 += h2 * r1;\n    d3 += h3 * r0;\n    d3 += h4 * (5 * r9);\n    c = (d3 >>> 13); d3 &= 0x1fff;\n    d3 += h5 * (5 * r8);\n    d3 += h6 * (5 * r7);\n    d3 += h7 * (5 * r6);\n    d3 += h8 * (5 * r5);\n    d3 += h9 * (5 * r4);\n    c += (d3 >>> 13); d3 &= 0x1fff;\n\n    d4 = c;\n    d4 += h0 * r4;\n    d4 += h1 * r3;\n    d4 += h2 * r2;\n    d4 += h3 * r1;\n    d4 += h4 * r0;\n    c = (d4 >>> 13); d4 &= 0x1fff;\n    d4 += h5 * (5 * r9);\n    d4 += h6 * (5 * r8);\n    d4 += h7 * (5 * r7);\n    d4 += h8 * (5 * r6);\n    d4 += h9 * (5 * r5);\n    c += (d4 >>> 13); d4 &= 0x1fff;\n\n    d5 = c;\n    d5 += h0 * r5;\n    d5 += h1 * r4;\n    d5 += h2 * r3;\n    d5 += h3 * r2;\n    d5 += h4 * r1;\n    c = (d5 >>> 13); d5 &= 0x1fff;\n    d5 += h5 * r0;\n    d5 += h6 * (5 * r9);\n    d5 += h7 * (5 * r8);\n    d5 += h8 * (5 * r7);\n    d5 += h9 * (5 * r6);\n    c += (d5 >>> 13); d5 &= 0x1fff;\n\n    d6 = c;\n    d6 += h0 * r6;\n    d6 += h1 * r5;\n    d6 += h2 * r4;\n    d6 += h3 * r3;\n    d6 += h4 * r2;\n    c = (d6 >>> 13); d6 &= 0x1fff;\n    d6 += h5 * r1;\n    d6 += h6 * r0;\n    d6 += h7 * (5 * r9);\n    d6 += h8 * (5 * r8);\n    d6 += h9 * (5 * r7);\n    c += (d6 >>> 13); d6 &= 0x1fff;\n\n    d7 = c;\n    d7 += h0 * r7;\n    d7 += h1 * r6;\n    d7 += h2 * r5;\n    d7 += h3 * r4;\n    d7 += h4 * r3;\n    c = (d7 >>> 13); d7 &= 0x1fff;\n    d7 += h5 * r2;\n    d7 += h6 * r1;\n    d7 += h7 * r0;\n    d7 += h8 * (5 * r9);\n    d7 += h9 * (5 * r8);\n    c += (d7 >>> 13); d7 &= 0x1fff;\n\n    d8 = c;\n    d8 += h0 * r8;\n    d8 += h1 * r7;\n    d8 += h2 * r6;\n    d8 += h3 * r5;\n    d8 += h4 * r4;\n    c = (d8 >>> 13); d8 &= 0x1fff;\n    d8 += h5 * r3;\n    d8 += h6 * r2;\n    d8 += h7 * r1;\n    d8 += h8 * r0;\n    d8 += h9 * (5 * r9);\n    c += (d8 >>> 13); d8 &= 0x1fff;\n\n    d9 = c;\n    d9 += h0 * r9;\n    d9 += h1 * r8;\n    d9 += h2 * r7;\n    d9 += h3 * r6;\n    d9 += h4 * r5;\n    c = (d9 >>> 13); d9 &= 0x1fff;\n    d9 += h5 * r4;\n    d9 += h6 * r3;\n    d9 += h7 * r2;\n    d9 += h8 * r1;\n    d9 += h9 * r0;\n    c += (d9 >>> 13); d9 &= 0x1fff;\n\n    c = (((c << 2) + c)) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = (c >>> 13);\n    d1 += c;\n\n    h0 = d0;\n    h1 = d1;\n    h2 = d2;\n    h3 = d3;\n    h4 = d4;\n    h5 = d5;\n    h6 = d6;\n    h7 = d7;\n    h8 = d8;\n    h9 = d9;\n\n    mpos += 16;\n    bytes -= 16;\n  }\n  this.h[0] = h0;\n  this.h[1] = h1;\n  this.h[2] = h2;\n  this.h[3] = h3;\n  this.h[4] = h4;\n  this.h[5] = h5;\n  this.h[6] = h6;\n  this.h[7] = h7;\n  this.h[8] = h8;\n  this.h[9] = h9;\n};\n\npoly1305.prototype.finish = function(mac, macpos) {\n  var g = new Uint16Array(10);\n  var c, mask, f, i;\n\n  if (this.leftover) {\n    i = this.leftover;\n    this.buffer[i++] = 1;\n    for (; i < 16; i++) this.buffer[i] = 0;\n    this.fin = 1;\n    this.blocks(this.buffer, 0, 16);\n  }\n\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  for (i = 2; i < 10; i++) {\n    this.h[i] += c;\n    c = this.h[i] >>> 13;\n    this.h[i] &= 0x1fff;\n  }\n  this.h[0] += (c * 5);\n  c = this.h[0] >>> 13;\n  this.h[0] &= 0x1fff;\n  this.h[1] += c;\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  this.h[2] += c;\n\n  g[0] = this.h[0] + 5;\n  c = g[0] >>> 13;\n  g[0] &= 0x1fff;\n  for (i = 1; i < 10; i++) {\n    g[i] = this.h[i] + c;\n    c = g[i] >>> 13;\n    g[i] &= 0x1fff;\n  }\n  g[9] -= (1 << 13);\n\n  mask = (c ^ 1) - 1;\n  for (i = 0; i < 10; i++) g[i] &= mask;\n  mask = ~mask;\n  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];\n\n  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;\n  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;\n  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;\n  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;\n  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;\n  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;\n  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;\n  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;\n\n  f = this.h[0] + this.pad[0];\n  this.h[0] = f & 0xffff;\n  for (i = 1; i < 8; i++) {\n    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;\n    this.h[i] = f & 0xffff;\n  }\n\n  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;\n  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;\n  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;\n  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;\n  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;\n  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;\n  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;\n  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;\n  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;\n  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;\n  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;\n  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;\n  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;\n  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;\n  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;\n  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;\n};\n\npoly1305.prototype.update = function(m, mpos, bytes) {\n  var i, want;\n\n  if (this.leftover) {\n    want = (16 - this.leftover);\n    if (want > bytes)\n      want = bytes;\n    for (i = 0; i < want; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    bytes -= want;\n    mpos += want;\n    this.leftover += want;\n    if (this.leftover < 16)\n      return;\n    this.blocks(this.buffer, 0, 16);\n    this.leftover = 0;\n  }\n\n  if (bytes >= 16) {\n    want = bytes - (bytes % 16);\n    this.blocks(m, mpos, want);\n    mpos += want;\n    bytes -= want;\n  }\n\n  if (bytes) {\n    for (i = 0; i < bytes; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    this.leftover += bytes;\n  }\n};\n\nfunction crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n  var s = new poly1305(k);\n  s.update(m, mpos, n);\n  s.finish(out, outpos);\n  return 0;\n}\n\nfunction crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n  var x = new Uint8Array(16);\n  crypto_onetimeauth(x,0,m,mpos,n,k);\n  return crypto_verify_16(h,hpos,x,0);\n}\n\nfunction crypto_secretbox(c,m,d,n,k) {\n  var i;\n  if (d < 32) return -1;\n  crypto_stream_xor(c,0,m,0,d,n,k);\n  crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n  for (i = 0; i < 16; i++) c[i] = 0;\n  return 0;\n}\n\nfunction crypto_secretbox_open(m,c,d,n,k) {\n  var i;\n  var x = new Uint8Array(32);\n  if (d < 32) return -1;\n  crypto_stream(x,0,32,n,k);\n  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;\n  crypto_stream_xor(m,0,c,0,d,n,k);\n  for (i = 0; i < 32; i++) m[i] = 0;\n  return 0;\n}\n\nfunction set25519(r, a) {\n  var i;\n  for (i = 0; i < 16; i++) r[i] = a[i]|0;\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for (i = 0; i < 16; i++) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c-1 + 37 * (c-1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b-1);\n  for (var i = 0; i < 16; i++) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for (i = 0; i < 16; i++) t[i] = n[i];\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for (j = 0; j < 2; j++) {\n    m[0] = t[0] - 0xffed;\n    for (i = 1; i < 15; i++) {\n      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\n    b = (m[15]>>16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1-b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2*i] = t[i] & 0xff;\n    o[2*i+1] = t[i]>>8;\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction par25519(a) {\n  var d = new Uint8Array(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\n  o[15] &= 0x7fff;\n}\n\nfunction A(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];\n}\n\nfunction Z(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 253; a >= 0; a--) {\n    S(c, c);\n    if(a !== 2 && a !== 4) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 250; a >= 0; a--) {\n      S(c, c);\n      if(a !== 1) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction crypto_scalarmult(q, n, p) {\n  var z = new Uint8Array(32);\n  var x = new Float64Array(80), r, i;\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf();\n  for (i = 0; i < 31; i++) z[i] = n[i];\n  z[31]=(n[31]&127)|64;\n  z[0]&=248;\n  unpack25519(x,p);\n  for (i = 0; i < 16; i++) {\n    b[i]=x[i];\n    d[i]=a[i]=c[i]=0;\n  }\n  a[0]=d[0]=1;\n  for (i=254; i>=0; --i) {\n    r=(z[i>>>3]>>>(i&7))&1;\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n    A(e,a,c);\n    Z(a,a,c);\n    A(c,b,d);\n    Z(b,b,d);\n    S(d,e);\n    S(f,a);\n    M(a,c,a);\n    M(c,b,e);\n    A(e,a,c);\n    Z(a,a,c);\n    S(b,a);\n    Z(c,d,f);\n    M(a,c,_121665);\n    A(a,a,d);\n    M(c,c,a);\n    M(a,d,f);\n    M(d,b,x);\n    S(b,e);\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n  }\n  for (i = 0; i < 16; i++) {\n    x[i+16]=a[i];\n    x[i+32]=c[i];\n    x[i+48]=b[i];\n    x[i+64]=d[i];\n  }\n  var x32 = x.subarray(32);\n  var x16 = x.subarray(16);\n  inv25519(x32,x32);\n  M(x16,x16,x32);\n  pack25519(q,x16);\n  return 0;\n}\n\nfunction crypto_scalarmult_base(q, n) {\n  return crypto_scalarmult(q, n, _9);\n}\n\nfunction crypto_box_keypair(y, x) {\n  randombytes(x, 32);\n  return crypto_scalarmult_base(y, x);\n}\n\nfunction crypto_box_beforenm(k, y, x) {\n  var s = new Uint8Array(32);\n  crypto_scalarmult(s, x, y);\n  return crypto_core_hsalsa20(k, _0, s, sigma);\n}\n\nvar crypto_box_afternm = crypto_secretbox;\nvar crypto_box_open_afternm = crypto_secretbox_open;\n\nfunction crypto_box(c, m, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_afternm(c, m, d, n, k);\n}\n\nfunction crypto_box_open(m, c, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_open_afternm(m, c, d, n, k);\n}\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction crypto_hashblocks_hl(hh, hl, m, n) {\n  var wh = new Int32Array(16), wl = new Int32Array(16),\n      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,\n      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,\n      th, tl, i, j, h, l, a, b, c, d;\n\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n\n  var pos = 0;\n  while (n >= 128) {\n    for (i = 0; i < 16; i++) {\n      j = 8 * i + pos;\n      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];\n      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];\n    }\n    for (i = 0; i < 80; i++) {\n      bh0 = ah0;\n      bh1 = ah1;\n      bh2 = ah2;\n      bh3 = ah3;\n      bh4 = ah4;\n      bh5 = ah5;\n      bh6 = ah6;\n      bh7 = ah7;\n\n      bl0 = al0;\n      bl1 = al1;\n      bl2 = al2;\n      bl3 = al3;\n      bl4 = al4;\n      bl5 = al5;\n      bl6 = al6;\n      bl7 = al7;\n\n      // add\n      h = ah7;\n      l = al7;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma1\n      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));\n      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Ch\n      h = (ah4 & ah5) ^ (~ah4 & ah6);\n      l = (al4 & al5) ^ (~al4 & al6);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // K\n      h = K[i*2];\n      l = K[i*2+1];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // w\n      h = wh[i%16];\n      l = wl[i%16];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16;\n\n      // add\n      h = th;\n      l = tl;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma0\n      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));\n      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Maj\n      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh7 = (c & 0xffff) | (d << 16);\n      bl7 = (a & 0xffff) | (b << 16);\n\n      // add\n      h = bh3;\n      l = bl3;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      h = th;\n      l = tl;\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh3 = (c & 0xffff) | (d << 16);\n      bl3 = (a & 0xffff) | (b << 16);\n\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i%16 === 15) {\n        for (j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n\n          a = l & 0xffff; b = l >>> 16;\n          c = h & 0xffff; d = h >>> 16;\n\n          h = wh[(j+9)%16];\n          l = wl[(j+9)%16];\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma0\n          th = wh[(j+1)%16];\n          tl = wl[(j+1)%16];\n          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);\n          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma1\n          th = wh[(j+14)%16];\n          tl = wl[(j+14)%16];\n          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);\n          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n\n          wh[j] = (c & 0xffff) | (d << 16);\n          wl[j] = (a & 0xffff) | (b << 16);\n        }\n      }\n    }\n\n    // add\n    h = ah0;\n    l = al0;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[0];\n    l = hl[0];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[0] = ah0 = (c & 0xffff) | (d << 16);\n    hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n    h = ah1;\n    l = al1;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[1];\n    l = hl[1];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[1] = ah1 = (c & 0xffff) | (d << 16);\n    hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n    h = ah2;\n    l = al2;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[2];\n    l = hl[2];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[2] = ah2 = (c & 0xffff) | (d << 16);\n    hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n    h = ah3;\n    l = al3;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[3];\n    l = hl[3];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[3] = ah3 = (c & 0xffff) | (d << 16);\n    hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n    h = ah4;\n    l = al4;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[4];\n    l = hl[4];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[4] = ah4 = (c & 0xffff) | (d << 16);\n    hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n    h = ah5;\n    l = al5;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[5];\n    l = hl[5];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[5] = ah5 = (c & 0xffff) | (d << 16);\n    hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n    h = ah6;\n    l = al6;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[6];\n    l = hl[6];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[6] = ah6 = (c & 0xffff) | (d << 16);\n    hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n    h = ah7;\n    l = al7;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[7];\n    l = hl[7];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[7] = ah7 = (c & 0xffff) | (d << 16);\n    hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n    pos += 128;\n    n -= 128;\n  }\n\n  return n;\n}\n\nfunction crypto_hash(out, m, n) {\n  var hh = new Int32Array(8),\n      hl = new Int32Array(8),\n      x = new Uint8Array(256),\n      i, b = n;\n\n  hh[0] = 0x6a09e667;\n  hh[1] = 0xbb67ae85;\n  hh[2] = 0x3c6ef372;\n  hh[3] = 0xa54ff53a;\n  hh[4] = 0x510e527f;\n  hh[5] = 0x9b05688c;\n  hh[6] = 0x1f83d9ab;\n  hh[7] = 0x5be0cd19;\n\n  hl[0] = 0xf3bcc908;\n  hl[1] = 0x84caa73b;\n  hl[2] = 0xfe94f82b;\n  hl[3] = 0x5f1d36f1;\n  hl[4] = 0xade682d1;\n  hl[5] = 0x2b3e6c1f;\n  hl[6] = 0xfb41bd6b;\n  hl[7] = 0x137e2179;\n\n  crypto_hashblocks_hl(hh, hl, m, n);\n  n %= 128;\n\n  for (i = 0; i < n; i++) x[i] = m[b-n+i];\n  x[n] = 128;\n\n  n = 256-128*(n<112?1:0);\n  x[n-9] = 0;\n  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);\n  crypto_hashblocks_hl(hh, hl, x, n);\n\n  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);\n\n  return 0;\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  var i;\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i/8)|0] >> (i&7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction crypto_sign_keypair(pk, sk, seeded) {\n  var d = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  if (!seeded) randombytes(sk, 32);\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for (i = 0; i < 32; i++) sk[i+32] = pk[i];\n  return 0;\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for (i = 63; i >= 32; --i) {\n    carry = 0;\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = Math.floor((x[j] + 128) / 256);\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j];\n  for (i = 0; i < 32; i++) {\n    x[i+1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64), i;\n  for (i = 0; i < 64; i++) x[i] = r[i];\n  for (i = 0; i < 64; i++) r[i] = 0;\n  modL(r, x);\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for (i = 0; i < n; i++) sm[64 + i] = m[i];\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];\n\n  crypto_hash(r, sm.subarray(32), n+32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i];\n  crypto_hash(h, sm, n + 64);\n  reduce(h);\n\n  for (i = 0; i < 64; i++) x[i] = 0;\n  for (i = 0; i < 32; i++) x[i] = r[i];\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i+j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) M(r[0], r[0], I);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) return -1;\n\n  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i;\n  var t = new Uint8Array(32), h = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  if (n < 64) return -1;\n\n  if (unpackneg(q, pk)) return -1;\n\n  for (i = 0; i < n; i++) m[i] = sm[i];\n  for (i = 0; i < 32; i++) m[i+32] = pk[i];\n  crypto_hash(h, m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if (crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0;\n    return -1;\n  }\n\n  for (i = 0; i < n; i++) m[i] = sm[i + 64];\n  return n;\n}\n\nvar crypto_secretbox_KEYBYTES = 32,\n    crypto_secretbox_NONCEBYTES = 24,\n    crypto_secretbox_ZEROBYTES = 32,\n    crypto_secretbox_BOXZEROBYTES = 16,\n    crypto_scalarmult_BYTES = 32,\n    crypto_scalarmult_SCALARBYTES = 32,\n    crypto_box_PUBLICKEYBYTES = 32,\n    crypto_box_SECRETKEYBYTES = 32,\n    crypto_box_BEFORENMBYTES = 32,\n    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,\n    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,\n    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,\n    crypto_sign_BYTES = 64,\n    crypto_sign_PUBLICKEYBYTES = 32,\n    crypto_sign_SECRETKEYBYTES = 64,\n    crypto_sign_SEEDBYTES = 32,\n    crypto_hash_BYTES = 64;\n\nnacl.lowlevel = {\n  crypto_core_hsalsa20: crypto_core_hsalsa20,\n  crypto_stream_xor: crypto_stream_xor,\n  crypto_stream: crypto_stream,\n  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n  crypto_stream_salsa20: crypto_stream_salsa20,\n  crypto_onetimeauth: crypto_onetimeauth,\n  crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n  crypto_verify_16: crypto_verify_16,\n  crypto_verify_32: crypto_verify_32,\n  crypto_secretbox: crypto_secretbox,\n  crypto_secretbox_open: crypto_secretbox_open,\n  crypto_scalarmult: crypto_scalarmult,\n  crypto_scalarmult_base: crypto_scalarmult_base,\n  crypto_box_beforenm: crypto_box_beforenm,\n  crypto_box_afternm: crypto_box_afternm,\n  crypto_box: crypto_box,\n  crypto_box_open: crypto_box_open,\n  crypto_box_keypair: crypto_box_keypair,\n  crypto_hash: crypto_hash,\n  crypto_sign: crypto_sign,\n  crypto_sign_keypair: crypto_sign_keypair,\n  crypto_sign_open: crypto_sign_open,\n\n  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n  crypto_sign_BYTES: crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n  crypto_hash_BYTES: crypto_hash_BYTES,\n\n  gf: gf,\n  D: D,\n  L: L,\n  pack25519: pack25519,\n  unpack25519: unpack25519,\n  M: M,\n  A: A,\n  S: S,\n  Z: Z,\n  pow2523: pow2523,\n  add: add,\n  set25519: set25519,\n  modL: modL,\n  scalarmult: scalarmult,\n  scalarbase: scalarbase,\n};\n\n/* High-level API */\n\nfunction checkLengths(k, n) {\n  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');\n  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');\n}\n\nfunction checkBoxLengths(pk, sk) {\n  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');\n  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');\n}\n\nfunction checkArrayTypes() {\n  for (var i = 0; i < arguments.length; i++) {\n    if (!(arguments[i] instanceof Uint8Array))\n      throw new TypeError('unexpected type, use Uint8Array');\n  }\n}\n\nfunction cleanup(arr) {\n  for (var i = 0; i < arr.length; i++) arr[i] = 0;\n}\n\nnacl.randomBytes = function(n) {\n  var b = new Uint8Array(n);\n  randombytes(b, n);\n  return b;\n};\n\nnacl.secretbox = function(msg, nonce, key) {\n  checkArrayTypes(msg, nonce, key);\n  checkLengths(key, nonce);\n  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n  var c = new Uint8Array(m.length);\n  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];\n  crypto_secretbox(c, m, m.length, nonce, key);\n  return c.subarray(crypto_secretbox_BOXZEROBYTES);\n};\n\nnacl.secretbox.open = function(box, nonce, key) {\n  checkArrayTypes(box, nonce, key);\n  checkLengths(key, nonce);\n  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n  var m = new Uint8Array(c.length);\n  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];\n  if (c.length < 32) return null;\n  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;\n  return m.subarray(crypto_secretbox_ZEROBYTES);\n};\n\nnacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\nnacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\nnacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n\nnacl.scalarMult = function(n, p) {\n  checkArrayTypes(n, p);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult(q, n, p);\n  return q;\n};\n\nnacl.scalarMult.base = function(n) {\n  checkArrayTypes(n);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult_base(q, n);\n  return q;\n};\n\nnacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\nnacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n\nnacl.box = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox(msg, nonce, k);\n};\n\nnacl.box.before = function(publicKey, secretKey) {\n  checkArrayTypes(publicKey, secretKey);\n  checkBoxLengths(publicKey, secretKey);\n  var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n  crypto_box_beforenm(k, publicKey, secretKey);\n  return k;\n};\n\nnacl.box.after = nacl.secretbox;\n\nnacl.box.open = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox.open(msg, nonce, k);\n};\n\nnacl.box.open.after = nacl.secretbox.open;\n\nnacl.box.keyPair = function() {\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n  crypto_box_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.box.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_box_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  crypto_scalarmult_base(pk, secretKey);\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\nnacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\nnacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\nnacl.box.nonceLength = crypto_box_NONCEBYTES;\nnacl.box.overheadLength = nacl.secretbox.overheadLength;\n\nnacl.sign = function(msg, secretKey) {\n  checkArrayTypes(msg, secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);\n  crypto_sign(signedMsg, msg, msg.length, secretKey);\n  return signedMsg;\n};\n\nnacl.sign.open = function(signedMsg, publicKey) {\n  checkArrayTypes(signedMsg, publicKey);\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var tmp = new Uint8Array(signedMsg.length);\n  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n  if (mlen < 0) return null;\n  var m = new Uint8Array(mlen);\n  for (var i = 0; i < m.length; i++) m[i] = tmp[i];\n  return m;\n};\n\nnacl.sign.detached = function(msg, secretKey) {\n  var signedMsg = nacl.sign(msg, secretKey);\n  var sig = new Uint8Array(crypto_sign_BYTES);\n  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];\n  return sig;\n};\n\nnacl.sign.detached.verify = function(msg, sig, publicKey) {\n  checkArrayTypes(msg, sig, publicKey);\n  if (sig.length !== crypto_sign_BYTES)\n    throw new Error('bad signature size');\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var i;\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];\n  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nnacl.sign.keyPair = function() {\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign.keyPair.fromSeed = function(seed) {\n  checkArrayTypes(seed);\n  if (seed.length !== crypto_sign_SEEDBYTES)\n    throw new Error('bad seed size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  for (var i = 0; i < 32; i++) sk[i] = seed[i];\n  crypto_sign_keypair(pk, sk, true);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\nnacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\nnacl.sign.seedLength = crypto_sign_SEEDBYTES;\nnacl.sign.signatureLength = crypto_sign_BYTES;\n\nnacl.hash = function(msg) {\n  checkArrayTypes(msg);\n  var h = new Uint8Array(crypto_hash_BYTES);\n  crypto_hash(h, msg, msg.length);\n  return h;\n};\n\nnacl.hash.hashLength = crypto_hash_BYTES;\n\nnacl.verify = function(x, y) {\n  checkArrayTypes(x, y);\n  // Zero length arguments are considered not equal.\n  if (x.length === 0 || y.length === 0) return false;\n  if (x.length !== y.length) return false;\n  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;\n};\n\nnacl.setPRNG = function(fn) {\n  randombytes = fn;\n};\n\n(function() {\n  // Initialize PRNG if environment provides CSPRNG.\n  // If not, methods calling randombytes will throw.\n  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;\n  if (crypto && crypto.getRandomValues) {\n    // Browsers.\n    var QUOTA = 65536;\n    nacl.setPRNG(function(x, n) {\n      var i, v = new Uint8Array(n);\n      for (i = 0; i < n; i += QUOTA) {\n        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n      }\n      for (i = 0; i < n; i++) x[i] = v[i];\n      cleanup(v);\n    });\n  } else if (typeof require !== 'undefined') {\n    // Node.js.\n    crypto = require('crypto');\n    if (crypto && crypto.randomBytes) {\n      nacl.setPRNG(function(x, n) {\n        var i, v = crypto.randomBytes(n);\n        for (i = 0; i < n; i++) x[i] = v[i];\n        cleanup(v);\n      });\n    }\n  }\n})();\n\n})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));\n"],"names":["exports","e","r","1","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","i","j","s","z","xc","yc","k","l","a","b","n","String","str","len","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","x","v","intCheck","round","isNum","alphabet","caseChanged","arrL","arr","carry","klo","khi","temp","xlo","m","xhi","cmp","c0","ne","toExponential","toFixedPoint","method","c","pows10","out","rd","ni","d","rm","sd","obj","crypto","getRandomValues","Error","EXPONENTIAL_AT","RANGE","rand","dp","args","sum","convertBase","y","baseOut","div","yL","yz","qc","q","base","more","xL","xi","remL","rem","yc0","rem0","prodL","prod","subtract","parseNumeric","this","nIsBig","length","nIsNeg","isModExp","nIsOdd","half","isOdd","ye","xe","t","xLTy","reverse","normalise","sqrtBase","xcL","ycL","zc","ylo","yhi","slice","coeffToString","rep","format","toFixed","g1","g2","intPart","fractionPart","isNeg","intDigits","isInteger","n1","d1","md","exp","n0","d2","d0","default","module","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","number","bytes","binarySuffixes","decimalSuffixes","currency","symbol","position","code","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","require","validating","parsing","powers","Math","pow","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","instance","providedFormat","numbro","parseFormat","validateFormat","postfix","state","currentCurrency","clonedFormat","Object","assign","options","space","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","_getFormatByteUnits","getFormatByteUnits","value","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","floor","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","min","max","zeroes","result","precision","indexOf","_result$split2","split","_slicedToArray","_base$split2","_base$split2$","substr","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","unshift","forEach","index","_ref3","_ref3$state","_ref3$defaults","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","_ref2","_ref2$characteristicP","characteristicPrecision","_value$toExponential$2","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","data","_ref","_ref$lowPrecision","_ref$spaceSeparated","_ref$totalLength","_ref$roundingFunction","isNegative","characteristicLength","currentAbbreviations","_data","trim","_result$toString$spli2","currentCharacteristic","_result$toString$spli3","currentMantissa","match","hasTrailingZeroes","_result$toString$spli5","replace","missingZeros","defaultFormat","keys","_key","arguments","apply","concat","getByteUnit","_key2","getBinaryByteUnit","_key3","getDecimalByteUnit","_key4","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","string","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","console","error","_subtract","other","otherValue","isNumbro","minus","toNumber","add","plus","multiply","times","divide","dividedBy","set","difference","clone","validator","loader","unformatter","formatter","manipulate","Numbro","input","normalizeInput","unformat","isNaN","NaN","version","object","language","defaultCurrencyFormat","validate","allSuffixes","key","factor","escapeRegExp","unformatValue","inputString","o","computeUnformattedValue","u","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","sort","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","type","validValues","restriction","message","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","map","_typeof","_data$restrictions$i","JSON","stringify","push","_toConsumableArray","reduce","acc","current","validInput","isFormatValid","nacl","gf","init","Float64Array","randombytes","_0","Uint8Array","_9","gf0","gf1","_121665","D","D2","X","Y","I","ts64","h","vn","yi","crypto_verify_16","crypto_verify_32","crypto_core_salsa20","inp","p","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","core_salsa20","crypto_core_hsalsa20","core_hsalsa20","sigma","crypto_stream_salsa20_xor","cpos","mpos","crypto_stream_salsa20","crypto_stream","sn","crypto_stream_xor","poly1305","t0","t1","t2","t3","t4","t5","t6","t7","buffer","Uint16Array","pad","leftover","fin","crypto_onetimeauth","outpos","update","finish","crypto_onetimeauth_verify","hpos","crypto_secretbox","crypto_secretbox_open","set25519","car25519","sel25519","pack25519","neq25519","par25519","unpack25519","A","Z","M","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","S","inv25519","pow2523","crypto_scalarmult","f","x32","subarray","x16","crypto_scalarmult_base","crypto_box_keypair","crypto_box_beforenm","prototype","blocks","d3","d4","d5","d6","d7","d8","d9","hibit","h0","h1","h2","h3","h4","h5","h6","h7","h8","h9","r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","mac","macpos","mask","g","want","crypto_box_afternm","crypto_box_open_afternm","K","crypto_hashblocks_hl","hh","hl","bh0","bh1","bh2","bh3","bh4","bh5","bh6","bh7","bl0","bl1","bl2","bl3","bl4","bl5","bl6","bl7","th","tl","wh","Int32Array","wl","ah0","ah1","ah2","ah3","ah4","ah5","ah6","ah7","al0","al1","al2","al3","al4","al5","al6","al7","pos","crypto_hash","cswap","pack","tx","ty","zi","scalarmult","scalarbase","crypto_sign_keypair","pk","sk","seeded","L","modL","crypto_sign","sm","smlen","crypto_sign_open","chk","num","den","den2","den4","den6","unpackneg","crypto_secretbox_BOXZEROBYTES","crypto_sign_BYTES","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","checkLengths","checkArrayTypes","TypeError","cleanup","lowlevel","crypto_box","crypto_box_open","crypto_secretbox_KEYBYTES","crypto_secretbox_NONCEBYTES","crypto_secretbox_ZEROBYTES","crypto_scalarmult_BYTES","crypto_scalarmult_SCALARBYTES","crypto_box_PUBLICKEYBYTES","crypto_box_SECRETKEYBYTES","crypto_box_BEFORENMBYTES","crypto_box_NONCEBYTES","crypto_box_ZEROBYTES","crypto_box_BOXZEROBYTES","crypto_sign_SEEDBYTES","crypto_hash_BYTES","randomBytes","secretbox","msg","nonce","open","box","keyLength","nonceLength","overheadLength","scalarMult","scalarLength","groupElementLength","publicKey","secretKey","before","checkBoxLengths","after","keyPair","fromSecretKey","publicKeyLength","secretKeyLength","sharedKeyLength","sign","signedMsg","tmp","mlen","detached","sig","verify","fromSeed","seed","seedLength","signatureLength","hash","hashLength","setPRNG","fn","self","msCrypto"],"sourceRoot":""}