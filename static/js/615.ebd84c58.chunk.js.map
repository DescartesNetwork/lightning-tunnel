{"version":3,"file":"static/js/615.ebd84c58.chunk.js","mappings":"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","sources":["os/configs/sol.config.ts","os/configs/register.config.ts","os/configs/stat.config.ts","os/configs/index.ts","os/store/accounts.reducer.ts","os/store/flags.reducer.ts","os/store/index.ts","os/store/mints.reducer.ts","os/store/page.reducer.ts","os/store/pools.reducer.ts","os/store/search.reducer.ts","os/store/ui.reducer.ts","os/store/walkthrough.reducer.ts","os/store/wallet.reducer.ts","os/view/wallet/lib/baseWallet.ts","os/view/wallet/lib/guestWallet.ts","os/view/wallet/lib/secretkeyWallet.ts","os/view/wallet/lib/keystoreWallet.ts","os/view/wallet/lib/coin98Wallet.ts","os/view/wallet/lib/phantomWallet.ts","os/view/wallet/lib/solletWebWallet.ts","os/view/wallet/lib/slopeWallet.ts","os/view/wallet/lib/solflareWebWallet.ts","os/view/wallet/lib/solflareExtWallet.ts","os/view/wallet/lib/cloverWallet.ts","shared/devTools.ts","shared/pdb/index.ts","shared/pdb/ipfs.ts","shared/storage.ts","shared/runtime.ts","shared/session.ts","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts"],"sourcesContent":["import { Net } from 'shared/runtime'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  sntrAddress: string\n  sntrPoolAddress: string\n  swapAddress: string\n  taxmanAddress: string\n} & typeof SOLVARS\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    ...SOLVARS,\n    node: 'https://api.devnet.solana.com',\n    sntrAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    sntrPoolAddress: '3EUPL7YQLbU6DNU5LZeQeHPXTf1MigJ2yASXA9rH5Ku4',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    ...SOLVARS,\n    node: 'https://api.testnet.solana.com',\n    sntrAddress: '',\n    sntrPoolAddress: '',\n    swapAddress: '',\n    taxmanAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    ...SOLVARS,\n    node: 'https://sentre.genesysgo.net',\n    sntrAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    sntrPoolAddress: 'Aa3WZX7Xunfebp2MuAcz9CNw8TYTDL7mVrmb11rjyVm6',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_NAME !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error(\n    'Please add REACT_APP_ID, REACT_APP_NAME, REACT_APP_URL in .env.local!',\n  )\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  defaultAppId: string\n  extra: SenReg\n  senreg: string\n}\n\nconst DEFAULT_APP_ID = process.env.REACT_APP_ID\nconst devApp = {\n  [DEFAULT_APP_ID]: {\n    url: process.env.REACT_APP_URL,\n    appId: DEFAULT_APP_ID,\n    name: process.env.REACT_APP_NAME,\n    author: {\n      name: process.env.REACT_APP_AUTHOR_NAME || '',\n      email: process.env.REACT_APP_AUTHOR_EMAIL || '',\n    },\n    tags: (process.env.REACT_APP_TAGS || '')\n      .split(',')\n      .map((tag) => tag.trim()),\n    description: process.env.REACT_APP_DESCRIPTION || '',\n    verified: false,\n  },\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: {},\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Config = {\n  baseURL: string\n}\n\nconst config: Record<Net, Config> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    baseURL: 'https://stat-dev.sentre.io',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    baseURL: 'https://stat-dev.sentre.io',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    baseURL: 'https://stat.sentre.io',\n  },\n}\n\n/**\n * Module exports\n */\nexport default config\n","import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\nimport stat from './stat.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n  stat: stat[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, AccountData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type AccountsState = Record<string, AccountData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'accounts'\nconst initialState: AccountsState = {}\n\n/**\n * Actions\n */\n\nexport const getAccounts = createAsyncThunk(\n  `${NAME}/getAccounts`,\n  async ({ owner }: { owner: string }) => {\n    if (!account.isAddress(owner))\n      throw new Error('Invalid owner/wallet address')\n    const { splt } = window.sentre\n    const ownerPublicKey = account.fromAddress(owner)\n    const { value } = await splt.connection.getTokenAccountsByOwner(\n      ownerPublicKey,\n      { programId: splt.spltProgramId },\n    )\n    let bulk: AccountsState = {}\n    value.forEach(({ pubkey, account: { data: buf } }) => {\n      const address = pubkey.toBase58()\n      const data = splt.parseAccountData(buf)\n      return (bulk[address] = data)\n    })\n    return bulk\n  },\n)\n\nexport const getAccount = createAsyncThunk<\n  AccountsState,\n  { address: string },\n  { state: any }\n>(`${NAME}/getAccount`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid account address')\n  const {\n    accounts: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { splt } = window.sentre\n  const raw = await splt.getAccountData(address)\n  return { [address]: raw }\n})\n\nexport const upsetAccount = createAsyncThunk<\n  AccountsState,\n  { address: string; data: AccountData },\n  { state: any }\n>(`${NAME}/upsetAccount`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteAccount = createAsyncThunk(\n  `${NAME}/deleteAccount`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getAccounts.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteAccount.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\n\n/**\n * Interface & Utility\n */\n\ntype FlagsState = {\n  visited: boolean\n  loading: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'flags'\nconst initialState: FlagsState = {\n  visited: true,\n  loading: true,\n}\n\n/**\n * Actions\n */\n\nexport const loadVisited = createAsyncThunk<\n  Partial<FlagsState>,\n  void,\n  { state: any }\n>(`${NAME}/loadVisited`, async (_, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet')\n  const db = new PDB(walletAddress).createInstance('sentre')\n  const visited: boolean = (await db.getItem('visited')) || false\n  return { visited }\n})\n\nexport const updateVisited = createAsyncThunk<\n  Partial<FlagsState>,\n  boolean,\n  { state: any }\n>(`${NAME}/updateVisited`, async (visited, { getState }) => {\n  const {\n    wallet: { address },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet')\n  const db = new PDB(address).createInstance('sentre')\n  await db.setItem('visited', visited)\n  return { visited }\n})\n\nexport const updateLoading = createAsyncThunk(\n  `${NAME}/updateLoading`,\n  async (loading: boolean) => {\n    return { loading }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadVisited.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateVisited.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateLoading.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import {\n  createDispatchHook,\n  createSelectorHook,\n  createStoreHook,\n  useDispatch,\n  useSelector,\n} from 'react-redux'\nimport { configureStore } from '@reduxjs/toolkit'\nimport { RootContext } from '@senhub/context'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ui from './ui.reducer'\nimport flags from './flags.reducer'\nimport page from './page.reducer'\nimport wallet from './wallet.reducer'\nimport accounts from './accounts.reducer'\nimport mints from './mints.reducer'\nimport pools from './pools.reducer'\nimport search from './search.reducer'\nimport walkthrough from './walkthrough.reducer'\n\n/**\n * Root types\n */\nexport type RootState = ReturnType<typeof store.getState>\nexport type RootDispatch = typeof store.dispatch\n\n/**\n * Root hooks\n */\nexport const useRootStore = createStoreHook(RootContext)\nexport const useRootDispatch: typeof useDispatch =\n  createDispatchHook(RootContext)\nexport const useRootSelector: typeof useSelector =\n  createSelectorHook(RootContext)\n\n/**\n * Root store\n */\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('sentre'),\n  reducer: {\n    ui,\n    flags,\n    page,\n    wallet,\n    accounts,\n    mints,\n    pools,\n    search,\n    walkthrough,\n  },\n})\n\nexport default store\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, MintData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type MintsState = Record<string, MintData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'mints'\nconst initialState: MintsState = {}\n\n/**\n * Actions\n */\n\nexport const getMint = createAsyncThunk<\n  MintsState,\n  { address: string; force?: boolean },\n  { state: any }\n>(`${NAME}/getMint`, async ({ address, force = false }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid mint address')\n  if (!force) {\n    const {\n      accounts: { [address]: data },\n    } = getState()\n    if (data) return { [address]: data }\n  }\n  const { splt } = window.sentre\n  const raw = await splt.getMintData(address)\n  return { [address]: raw }\n})\n\nexport const upsetMint = createAsyncThunk<\n  MintsState,\n  { address: string; data: MintData },\n  { state: any }\n>(`${NAME}/upsetMint`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteMint = createAsyncThunk(\n  `${NAME}/deleteMint`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        getMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteMint.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\nimport configs from 'os/configs'\n\nconst {\n  register: { senreg, extra },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type PageState = {\n  register: SenReg\n  appIds: AppIds\n}\n\nconst troubleshoot = (register: SenReg, appIds?: AppIds): AppIds => {\n  if (!appIds || !Array.isArray(appIds)) return []\n  return appIds.filter((appId) => register[appId])\n}\nconst fetchRegister = async () => {\n  try {\n    const res = await fetch(senreg)\n    return await res.json()\n  } catch (er) {\n    return {}\n  }\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'page'\nconst initialState: PageState = {\n  register: {},\n  appIds: [],\n}\n\n/**\n * Actions\n */\n\n// Must fetch register at very first of the process\nexport const loadRegister = createAsyncThunk(\n  `${NAME}/loadRegister`,\n  async () => {\n    const register = await fetchRegister()\n    return { register: { ...register, ...extra } }\n  },\n)\n\n// For sandbox only\nexport const installManifest = createAsyncThunk<\n  Partial<PageState>,\n  ComponentManifest,\n  { state: any }\n>(`${NAME}/installManifest`, async (manifest, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { appIds, register },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(manifest.appId))\n    throw new Error('Cannot run sandbox for an installed application.')\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(manifest.appId)\n  const newRegister: SenReg = { ...register }\n  newRegister[manifest.appId] = manifest\n  return { appIds: newAppIds, register: newRegister }\n})\n\n/**\n * App Actions\n */\nexport const loadPage = createAsyncThunk<\n  Partial<PageState>,\n  void,\n  { state: any }\n>(`${NAME}/loadPage`, async (_, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { register },\n  } = getState()\n\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  // Fetch user's apps\n  const db = new PDB(walletAddress).createInstance('sentre')\n  const appIds = troubleshoot(\n    register,\n    (await db.getItem('appIds')) || initialState.appIds,\n  )\n  return { appIds }\n})\n\nexport const updatePage = createAsyncThunk<\n  Partial<PageState>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updatePage`, async (appIds, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { register },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  appIds = troubleshoot(register, appIds)\n  const db = new PDB(walletAddress).createInstance('sentre')\n  await db.setItem('appIds', appIds)\n  return { appIds }\n})\n\nexport const installApp = createAsyncThunk<\n  Partial<PageState>,\n  string,\n  { state: any }\n>(`${NAME}/installApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { appIds },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(appId)) return {}\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(appId)\n  const db = new PDB(walletAddress).createInstance('sentre')\n  await db.setItem('appIds', newAppIds)\n  return { appIds: newAppIds }\n})\n\nexport const uninstallApp = createAsyncThunk<\n  Partial<PageState>,\n  string,\n  { state: any }\n>(`${NAME}/uninstallApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { appIds },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  if (!appIds.includes(appId)) return {}\n  const newAppIds = appIds.filter((_appId: string) => _appId !== appId)\n  const pdb = new PDB(walletAddress)\n  const db = pdb.createInstance('sentre')\n  await db.setItem('appIds', newAppIds)\n  await pdb.dropInstance(appId)\n  return { appIds: newAppIds }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadRegister.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installManifest.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        loadPage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updatePage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        uninstallApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { AccountInfo, PublicKey } from '@solana/web3.js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, PoolData } from '@senswap/sen-js'\nimport configs from 'os/configs'\n\nconst {\n  sol: { taxmanAddress },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type PoolsState = Record<string, PoolData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'pools'\nconst initialState: PoolsState = {}\n\n/**\n * Actions\n */\n\nexport const getPools = createAsyncThunk(`${NAME}/getPools`, async () => {\n  const { swap } = window.sentre\n  // Get all pools\n  const value: Array<{ pubkey: PublicKey; account: AccountInfo<Buffer> }> =\n    await swap.connection.getProgramAccounts(swap.swapProgramId, {\n      filters: [\n        { dataSize: 257 },\n        { memcmp: { bytes: taxmanAddress, offset: 65 } },\n      ],\n    })\n  let bulk: PoolsState = {}\n  value.forEach(({ pubkey, account: { data: buf } }) => {\n    const address = pubkey.toBase58()\n    const data = swap.parsePoolData(buf)\n    bulk[address] = data\n  })\n  return bulk\n})\n\nexport const getPool = createAsyncThunk<\n  PoolsState,\n  { address: string },\n  { state: any }\n>(`${NAME}/getPool`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  const {\n    pools: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { swap } = window.sentre\n  const raw = await swap.getPoolData(address)\n  return { [address]: raw }\n})\n\nexport const upsetPool = createAsyncThunk<\n  PoolsState,\n  { address: string; data: PoolData },\n  { state: any }\n>(`${NAME}/upsetPool`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getPools.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\ntype SearchState = {\n  visible: boolean\n  value: string\n  loading: boolean\n  disabled: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'search'\nconst initialState: SearchState = {\n  visible: false,\n  value: '',\n  loading: false,\n  disabled: false,\n}\n\n/**\n * Actions\n */\n\nexport const setVisible = createAsyncThunk(\n  `${NAME}/setVisible`,\n  async (visible: boolean) => {\n    return { visible }\n  },\n)\n\nexport const setValue = createAsyncThunk(\n  `${NAME}/setValue`,\n  async (value: string) => {\n    return { value }\n  },\n)\n\nexport const setLoading = createAsyncThunk(\n  `${NAME}/setLoading`,\n  async (loading: boolean) => {\n    return { loading }\n  },\n)\n\nexport const setDisabled = createAsyncThunk(\n  `${NAME}/setDisabled`,\n  async (disabled: boolean) => {\n    return { disabled }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setVisible.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setValue.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setLoading.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDisabled.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type Infix = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\nexport type Theme = 'light' | 'dark'\nexport type Background = Record<Theme, string | undefined>\n\nexport type UIState = {\n  theme: Theme\n  width: number\n  infix: Infix\n  touchable: boolean\n  visibleActionCenter: boolean\n  visibleInstaller: boolean\n  background: Background\n}\n\nconst getInfix = (): Infix => {\n  const width = window.innerWidth\n  if (width < 576) return 'xs'\n  if (width < 768) return 'sm'\n  if (width < 992) return 'md'\n  if (width < 1200) return 'lg'\n  if (width < 1400) return 'xl'\n  return 'xxl'\n}\nconst isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\nconst getTheme = (): Theme => {\n  if (window.matchMedia('(prefers-color-scheme: light)').matches) return 'light'\n  return 'dark'\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'ui'\nconst initialState: UIState = {\n  theme: getTheme(),\n  width: window.innerWidth,\n  infix: getInfix(),\n  touchable: isTouchable(),\n  visibleActionCenter: false,\n  visibleInstaller: false,\n  background: {\n    light: '',\n    dark: '',\n  },\n}\n\n/**\n * Actions\n */\n\nexport const setTheme = createAsyncThunk(\n  `${NAME}/setTheme`,\n  async (theme: Theme) => {\n    return { theme }\n  },\n)\n\nexport const resize = createAsyncThunk(`${NAME}/resize`, async () => {\n  const width = window.innerWidth\n  const infix = getInfix()\n  return { width, infix }\n})\n\nexport const setVisibleActionCenter = createAsyncThunk(\n  `${NAME}/setVisibleActionCenter`,\n  async (visible: boolean) => {\n    return { visibleActionCenter: visible }\n  },\n)\n\nexport const setVisibleInstaller = createAsyncThunk(\n  `${NAME}/setVisibleInstaller`,\n  async (visible: boolean) => {\n    return { visibleInstaller: visible }\n  },\n)\n\nexport const setBackground = createAsyncThunk(\n  `${NAME}/setBackground`,\n  async (background: Background) => {\n    return { background }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setTheme.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        resize.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setVisibleActionCenter.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setVisibleInstaller.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setBackground.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\nexport enum WalkThroughType {\n  Default,\n  NewComer,\n}\n\ntype WalkThorughState = {\n  type: WalkThroughType\n  run: boolean\n  step: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'walkthrough'\nconst initialState: WalkThorughState = {\n  type: WalkThroughType.Default,\n  run: false,\n  step: 0,\n}\n\n/**\n * Actions\n */\n\nexport const setWalkthrough = createAsyncThunk<\n  Partial<WalkThorughState>,\n  Partial<WalkThorughState>,\n  { state: any }\n>(`${NAME}/setWalkthrough`, async (state) => {\n  return { ...state }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      setWalkthrough.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { Lamports, SPLT, Swap, WalletInterface } from '@senswap/sen-js'\n\nimport configs from 'os/configs'\nimport { GuestWallet } from 'os/view/wallet/lib'\n\n/**\n * Interface & Utility\n */\n\nexport type WalletState = {\n  visible: boolean\n  address: string\n  lamports: bigint\n}\n\nconst initializeWindow = async (wallet?: WalletInterface) => {\n  const {\n    sol: { node, spltAddress, splataAddress, swapAddress },\n  } = configs\n  window.sentre = {\n    wallet: wallet || new GuestWallet(),\n    lamports: new Lamports(node),\n    splt: new SPLT(spltAddress, splataAddress, node),\n    swap: new Swap(swapAddress, spltAddress, splataAddress, node),\n  }\n}\n\nconst destroyWindow = async () => {\n  if (window.sentre?.wallet) window.sentre.wallet.disconnect()\n  await initializeWindow()\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'wallet'\nconst initialState: WalletState = {\n  visible: false,\n  address: '',\n  lamports: BigInt(0),\n}\n\n/**\n * Actions\n */\n\nexport const openWallet = createAsyncThunk(`${NAME}/openWallet`, async () => {\n  return { visible: true }\n})\n\nexport const closeWallet = createAsyncThunk(`${NAME}/closeWallet`, async () => {\n  return { visible: false }\n})\n\nexport const connectWallet = createAsyncThunk(\n  `${NAME}/connectWallet`,\n  async (wallet: any) => {\n    if (!wallet) throw new Error('Invalid wallet instance')\n    await initializeWindow(wallet)\n    const address = await wallet.getAddress()\n    const lamports = await window.sentre.lamports.getLamports(address)\n    return { address, lamports: BigInt(lamports), visible: false }\n  },\n)\n\nexport const updateWallet = createAsyncThunk(\n  `${NAME}/updateWallet`,\n  async ({ lamports }: Partial<WalletState>) => {\n    return { lamports }\n  },\n)\n\nexport const disconnectWallet = createAsyncThunk(\n  `${NAME}/disconnectWallet`,\n  async () => {\n    await destroyWindow()\n    window.location.reload() // Reset all redux store\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        openWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        closeWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        connectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        disconnectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { Transaction } from '@solana/web3.js'\nimport {\n  WalletInterface,\n  Provider,\n  Signature,\n  SignedMessage,\n} from '@senswap/sen-js'\n\nimport session from 'shared/session'\n\nclass BaseWallet implements WalletInterface {\n  readonly walletType: string\n\n  constructor(walletType: string) {\n    this.walletType = walletType\n    session.set('WalletType', this.walletType)\n  }\n\n  getProvider = async (): Promise<Provider> => {\n    throw new Error('Wallet is not connected')\n  }\n\n  getAddress = async (): Promise<string> => {\n    throw new Error('Wallet is not connected')\n  }\n\n  signTransaction = async (transaction: Transaction): Promise<Transaction> => {\n    const { signature, publicKey } = await this.rawSignTransaction(transaction)\n    transaction.addSignature(publicKey, signature)\n    return transaction\n  }\n\n  rawSignTransaction = async (transaction: Transaction): Promise<Signature> => {\n    throw new Error('Wallet is not connected')\n  }\n\n  signMessage = async (message: string): Promise<SignedMessage> => {\n    throw new Error('Wallet is not connected')\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ): Promise<boolean> => {\n    throw new Error('Wallet is not connected')\n  }\n\n  disconnect = async (): Promise<void> => {\n    session.clear('WalletType')\n    const provider = await this.getProvider()\n    provider.disconnect()\n  }\n}\n\nexport default BaseWallet\n","import { Transaction } from '@solana/web3.js'\nimport { Provider } from '@senswap/sen-js'\n\nimport BaseWallet from './baseWallet'\n\nexport const GUEST_ADDRESS = 'GuestAccount11111111111111111111111111111111'\n\ntype ExpanedProvider = Provider & { address: string }\n\nclass GuestWallet extends BaseWallet {\n  constructor(callback: () => void = () => {}) {\n    super('Guest')\n\n    this._callback = callback\n  }\n\n  private _callback = () => {}\n  private _error = () => {\n    throw new Error(\n      'You are in the Guest Mode. Please connect your personal wallet to proceed the action.',\n    )\n  }\n\n  getProvider = async (): Promise<ExpanedProvider> => {\n    const provider = {\n      address: GUEST_ADDRESS,\n      disconnect: () => {},\n    }\n    return provider\n  }\n\n  getAddress = async () => {\n    const { address } = await this.getProvider()\n    return address\n  }\n\n  rawSignTransaction = async (transaction: Transaction) => {\n    await this._callback()\n    return this._error()\n  }\n\n  signMessage = async (message: string) => {\n    await this._callback()\n    return this._error()\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ) => {\n    await this._callback()\n    return this._error()\n  }\n}\n\nexport default GuestWallet\n","import { Transaction, Keypair } from '@solana/web3.js'\nimport * as nacl from 'tweetnacl'\nimport { account, Provider, Signature } from '@senswap/sen-js'\n\nimport BaseWallet from './baseWallet'\nimport session from 'shared/session'\n\ntype ExpanedProvider = Provider & { keypair: Keypair }\n\nclass SecretKeyWallet extends BaseWallet {\n  constructor(secretKey: string) {\n    super('SecretKey')\n\n    this._setSecretKey(secretKey)\n  }\n\n  private _setSecretKey = (secretKey: string): void => {\n    if (!secretKey) throw new Error('Invalid secret key')\n    session.set('SecretKey', secretKey)\n  }\n\n  getProvider = async (): Promise<ExpanedProvider> => {\n    const secretKey = session.get('SecretKey')\n    const keypair = account.fromSecretKey(secretKey)\n    if (!keypair) throw new Error('Cannot get the keystore-based provider')\n    const provider = {\n      keypair,\n      disconnect: () => session.clear('SecretKey'),\n    }\n    return provider\n  }\n\n  getAddress = async () => {\n    const { keypair } = await this.getProvider()\n    return keypair.publicKey.toBase58()\n  }\n\n  rawSignTransaction = async (transaction: Transaction) => {\n    const confirmed = window.confirm('Please confirm to sign the transaction!')\n    if (!confirmed) throw new Error('User rejects to sign the transaction')\n    const { keypair } = await this.getProvider()\n    const signData = transaction.serializeMessage()\n    const publicKey = keypair.publicKey\n    const signature = nacl.sign.detached(signData, keypair.secretKey)\n    return { publicKey, signature } as Signature\n  }\n\n  signMessage = async (message: string) => {\n    if (!message) throw new Error('Message must be a non-empty string')\n    const confirmed = window.confirm(\n      `Please confirm to sign the message! Message: ${message}`,\n    )\n    if (!confirmed) throw new Error('User rejects to sign the message')\n    const { keypair } = await this.getProvider()\n    const secretKey = Buffer.from(keypair.secretKey).toString('hex')\n    const data = account.signMessage(message, secretKey)\n    return { ...data }\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ) => {\n    address = address || (await this.getAddress())\n    const valid = account.verifySignature(address, signature, message)\n    return valid as boolean\n  }\n}\n\nexport default SecretKeyWallet\n","import { Transaction, Keypair } from '@solana/web3.js'\nimport * as nacl from 'tweetnacl'\nimport { account, Keystore, Provider, Signature } from '@senswap/sen-js'\n\nimport BaseWallet from './baseWallet'\nimport session from 'shared/session'\n\ntype ExpanedProvider = Provider & { keypair: Keypair }\n\nclass KeystoreWallet extends BaseWallet {\n  constructor(keystore: Keystore, password: string) {\n    super('SecretKey')\n\n    this._setSecretKey(keystore, password)\n  }\n\n  private _setSecretKey = (keystore: Keystore, password: string): void => {\n    const keypair = account.fromKeystore(keystore, password)\n    if (!keypair) throw new Error('Invalid ketstore or password')\n    const secretKey = Buffer.from(keypair.secretKey).toString('hex')\n    session.set('SecretKey', secretKey)\n  }\n\n  getProvider = async (): Promise<ExpanedProvider> => {\n    const secretKey = session.get('SecretKey')\n    const keypair = account.fromSecretKey(secretKey)\n    if (!keypair) throw new Error('Cannot get the keystore-based provider')\n    const provider = {\n      keypair,\n      disconnect: () => session.clear('SecretKey'),\n    }\n    return provider\n  }\n\n  getAddress = async () => {\n    const { keypair } = await this.getProvider()\n    return keypair.publicKey.toBase58()\n  }\n\n  rawSignTransaction = async (transaction: Transaction) => {\n    const confirmed = window.confirm('Please confirm to sign the transaction!')\n    if (!confirmed) throw new Error('User rejects to sign the transaction')\n    const { keypair } = await this.getProvider()\n    const signData = transaction.serializeMessage()\n    const publicKey = keypair.publicKey\n    const signature = nacl.sign.detached(signData, keypair.secretKey)\n    return { publicKey, signature } as Signature\n  }\n\n  signMessage = async (message: string) => {\n    if (!message) throw new Error('Message must be a non-empty string')\n    const confirmed = window.confirm(\n      `Please confirm to sign the message! Message: ${message}`,\n    )\n    if (!confirmed) throw new Error('User rejects to sign the message')\n    const { keypair } = await this.getProvider()\n    const secretKey = Buffer.from(keypair.secretKey).toString('hex')\n    const data = account.signMessage(message, secretKey)\n    return { ...data }\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ) => {\n    address = address || (await this.getAddress())\n    const valid = account.verifySignature(address, signature, message)\n    return valid as boolean\n  }\n}\n\nexport default KeystoreWallet\n","import { Transaction } from '@solana/web3.js'\nimport { account, Signature, SignedMessage } from '@senswap/sen-js'\nimport { decode } from 'bs58'\n\nimport BaseWallet from './baseWallet'\n\n\nclass Coin98Wallet extends BaseWallet {\n  constructor() {\n    super('Coin98')\n  }\n\n  getProvider = async () => {\n    const { sol } = window?.coin98 || {}\n    if (!sol) throw new Error('Wallet is not connected')\n    return sol\n  }\n\n  getAddress = async () => {\n    const provider = await this.getProvider()\n    const [address] = (await provider.request({ method: 'sol_accounts' })) || []\n    if (!account.isAddress(address))\n      throw new Error('There is no Solana account')\n    return address\n  }\n\n  rawSignTransaction = async (transaction: Transaction) => {\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const publicKey = account.fromAddress(address)\n    transaction.feePayer = publicKey\n    const { signature: sig } = await provider.request({\n      method: 'sol_sign',\n      params: [transaction],\n    })\n    const signature = decode(sig)\n    return { publicKey, signature } as Signature\n  }\n\n  signMessage = async (message: string) => {\n    if (!message) throw new Error('Message must be a non-empty string')\n    const provider = await this.getProvider()\n    const data = await provider.request({\n      method: 'sol_sign',\n      params: [message],\n    })\n    return data as SignedMessage\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ) => {\n    address = address || (await this.getAddress())\n    const valid = await account.verifySignature(address, signature, message)\n    return valid as boolean\n  }\n}\n\nexport default Coin98Wallet\n","import { Transaction } from '@solana/web3.js'\nimport * as nacl from 'tweetnacl'\nimport { account, Signature, SignedMessage } from '@senswap/sen-js'\n\nimport BaseWallet from './baseWallet'\n\nclass PhantomWallet extends BaseWallet {\n  constructor() {\n    super('Phantom')\n  }\n\n  getProvider = async () => {\n    const { solana } = window\n    if (!solana?.isPhantom) throw new Error('Wallet is not connected')\n    if (solana.isConnected) return solana\n    solana.connect()\n    return await new Promise((resolve) =>\n      solana.on('connect', () => resolve(solana)),\n    )\n  }\n\n  getAddress = async () => {\n    const provider = await this.getProvider()\n    const address = provider.publicKey.toString()\n    if (!account.isAddress(address))\n      throw new Error('There is no Solana account')\n    return address\n  }\n\n  rawSignTransaction = async (transaction: Transaction) => {\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const publicKey = account.fromAddress(address)\n    transaction.feePayer = publicKey\n    const { signature } = await provider.signTransaction(transaction)\n    return { publicKey, signature } as Signature\n  }\n\n  signMessage = async (message: string) => {\n    if (!message) throw new Error('Message must be a non-empty string')\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const encodedMsg = new TextEncoder().encode(message)\n    const { signature: sig } = await provider.signMessage(encodedMsg, 'utf8')\n    const signature = Buffer.from(sig).toString('hex')\n    const data = { address, signature, message }\n    return data as SignedMessage\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ) => {\n    address = address || (await this.getAddress())\n    const publicKey = account.fromAddress(address)\n    const bufSig = Buffer.from(signature, 'hex')\n    const encodedMsg = new TextEncoder().encode(message)\n    const valid = nacl.sign.detached.verify(\n      encodedMsg,\n      bufSig,\n      publicKey.toBuffer(),\n    )\n    return valid\n  }\n}\n\nexport default PhantomWallet\n","import { Transaction } from '@solana/web3.js'\nimport * as nacl from 'tweetnacl'\nimport { account, Provider, Signature, SignedMessage } from '@senswap/sen-js'\nimport WalletAdapter from '@project-serum/sol-wallet-adapter'\n\nimport BaseWallet from './baseWallet'\nimport configs from 'os/configs'\n\nconst PROVIDER_URL = 'https://www.sollet.io'\n\nclass SolletWallet extends BaseWallet {\n  private provider: WalletAdapter & Provider\n\n  constructor() {\n    super('SolletWeb')\n\n    const {\n      sol: { node },\n    } = configs\n    this.provider = new WalletAdapter(PROVIDER_URL, node)\n  }\n\n  getProvider = async () => {\n    if (!this.provider.connected) await this.provider.connect()\n    return this.provider\n  }\n\n  getAddress = async () => {\n    const provider = await this.getProvider()\n    if (!provider.publicKey) throw new Error('Cannot connect to Sollet Web')\n    return provider.publicKey.toBase58()\n  }\n\n  rawSignTransaction = async (transaction: Transaction) => {\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const publicKey = account.fromAddress(address)\n    transaction.feePayer = publicKey\n    const { signature } = await provider.signTransaction(transaction)\n    return { publicKey, signature } as Signature\n  }\n\n  signMessage = async (message: string) => {\n    if (!message) throw new Error('Message must be a non-empty string')\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const encodedMsg = new TextEncoder().encode(message)\n    const { signature: sig } = await provider.sign(encodedMsg, 'utf8')\n    const signature = Buffer.from(sig).toString('hex')\n    const data = { address, signature, message }\n    return data as SignedMessage\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ) => {\n    address = address || (await this.getAddress())\n    const publicKey = account.fromAddress(address)\n    const bufSig = Buffer.from(signature, 'hex')\n    const encodedMsg = new TextEncoder().encode(message)\n    const valid = nacl.sign.detached.verify(\n      encodedMsg,\n      bufSig,\n      publicKey.toBuffer(),\n    )\n    return valid\n  }\n}\n\nexport default SolletWallet\n","import { Transaction, PublicKey } from '@solana/web3.js'\nimport * as nacl from 'tweetnacl'\nimport { account, Signature } from '@senswap/sen-js'\nimport { decode, encode } from 'bs58'\n\nimport BaseWallet from './baseWallet'\n\nclass SlopeWallet extends BaseWallet {\n  private provider: any\n  constructor() {\n    super('Slope')\n    this.provider = null\n  }\n\n  getProvider = async () => {\n    const { Slope } = window || {}\n    if (!Slope) throw new Error('Cannot connect to Slope')\n    if (this.provider) return this.provider\n    this.provider = new Slope()\n    await this.provider.connect()\n    return this.provider\n  }\n\n  getAddress = async () => {\n    const provider = await this.getProvider()\n    const { data } = await provider.connect()\n    if (!data.publicKey) throw new Error('Wallet is not connected')\n    return data.publicKey\n  }\n\n  rawSignTransaction = async (transaction: Transaction) => {\n    const provider = await this.getProvider()\n    const message = encode(transaction.serializeMessage())\n    const { msg, data } = await provider.signTransaction(message)\n\n    if (!data.publicKey) throw new Error(msg)\n    const publicKey = new PublicKey(data.publicKey)\n    const signature = decode(data.signature)\n\n    return { publicKey, signature } as Signature\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ) => {\n    const slopeAddress = address || (await this.getAddress())\n    const publicKey = account.fromAddress(slopeAddress)\n    const bufSig = Buffer.from(signature, 'hex')\n    const encodedMsg = new TextEncoder().encode(message)\n    const valid = nacl.sign.detached.verify(\n      encodedMsg,\n      bufSig,\n      publicKey.toBuffer(),\n    )\n    return valid\n  }\n}\n\nexport default SlopeWallet\n","import { Transaction } from '@solana/web3.js'\nimport * as nacl from 'tweetnacl'\nimport { account, Provider, Signature, SignedMessage } from '@senswap/sen-js'\nimport WalletAdapter from '@project-serum/sol-wallet-adapter'\n\nimport BaseWallet from './baseWallet'\nimport configs from 'os/configs'\n\nconst PROVIDER_URL = 'https://solflare.com/provider'\n\nclass SolflareWebWallet extends BaseWallet {\n  private provider: WalletAdapter & Provider\n\n  constructor() {\n    super('SolflareWeb')\n\n    const {\n      sol: { node },\n    } = configs\n    this.provider = new WalletAdapter(PROVIDER_URL, node)\n  }\n\n  getProvider = async () => {\n    if (!this.provider.connected) await this.provider.connect()\n    return this.provider\n  }\n\n  getAddress = async () => {\n    const provider = await this.getProvider()\n    if (!provider.publicKey) throw new Error('Cannot connect to Solflare')\n    return provider.publicKey.toBase58()\n  }\n\n  rawSignTransaction = async (transaction: Transaction) => {\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const publicKey = account.fromAddress(address)\n    transaction.feePayer = publicKey\n    const { signature } = await provider.signTransaction(transaction)\n    return { publicKey, signature } as Signature\n  }\n\n  signMessage = async (message: string) => {\n    if (!message) throw new Error('Message must be a non-empty string')\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const encodedMsg = new TextEncoder().encode(message)\n    const { signature: sig } = await provider.sign(encodedMsg, 'utf8')\n    const signature = Buffer.from(sig).toString('hex')\n    const data = { address, signature, message }\n    return data as SignedMessage\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ) => {\n    address = address || (await this.getAddress())\n    const publicKey = account.fromAddress(address)\n    const bufSig = Buffer.from(signature, 'hex')\n    const encodedMsg = new TextEncoder().encode(message)\n    const valid = nacl.sign.detached.verify(\n      encodedMsg,\n      bufSig,\n      publicKey.toBuffer(),\n    )\n    return valid\n  }\n}\n\nexport default SolflareWebWallet\n","import { Transaction } from '@solana/web3.js'\nimport * as nacl from 'tweetnacl'\nimport { account, Signature, SignedMessage } from '@senswap/sen-js'\n\nimport BaseWallet from './baseWallet'\n\nclass SolflareExtWallet extends BaseWallet {\n  constructor() {\n    super('SolflareExtension')\n  }\n\n  getProvider = async () => {\n    const { solflare } = window\n    if (!solflare.isSolflare) throw new Error('Wallet is not connected')\n    if (solflare.isConnected) return solflare\n    solflare.connect()\n    return await new Promise((resolve) =>\n      solflare.on('connect', () => resolve(solflare)),\n    )\n  }\n\n  getAddress = async () => {\n    const provider = await this.getProvider()\n    const address = provider.publicKey.toString()\n    if (!account.isAddress(address))\n      throw new Error('There is no Solana account')\n    return address\n  }\n\n  rawSignTransaction = async (transaction: Transaction) => {\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const publicKey = account.fromAddress(address)\n    transaction.feePayer = publicKey\n    const { signature } = await provider.signTransaction(transaction)\n    return { publicKey, signature } as Signature\n  }\n\n  signMessage = async (message: string) => {\n    if (!message) throw new Error('Message must be a non-empty string')\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const encodedMsg = new TextEncoder().encode(message)\n    const { signature: sig } = await provider.signMessage(encodedMsg, 'utf8')\n    const signature = Buffer.from(sig).toString('hex')\n    const data = { address, signature, message }\n    return data as SignedMessage\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ) => {\n    address = address || (await this.getAddress())\n    const publicKey = account.fromAddress(address)\n    const bufSig = Buffer.from(signature, 'hex')\n    const encodedMsg = new TextEncoder().encode(message)\n    const valid = nacl.sign.detached.verify(\n      encodedMsg,\n      bufSig,\n      publicKey.toBuffer(),\n    )\n    return valid\n  }\n}\n\nexport default SolflareExtWallet\n","import { Transaction } from '@solana/web3.js'\nimport * as nacl from 'tweetnacl'\nimport { account, Signature, SignedMessage } from '@senswap/sen-js'\n\nimport BaseWallet from './baseWallet'\n\nclass CloverWallet extends BaseWallet {\n  constructor() {\n    super('Clover')\n  }\n\n  getProvider = async () => {\n    const { clover_solana } = window\n    if (!clover_solana?.isCloverWallet)\n      throw new Error('Wallet is not connected')\n    return clover_solana\n  }\n\n  getAddress = async () => {\n    const provider = await this.getProvider()\n    const address = await provider.getAccount()\n    if (!account.isAddress(address))\n      throw new Error('There is no Solana account')\n    return address\n  }\n\n  rawSignTransaction = async (transaction: Transaction) => {\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const publicKey = account.fromAddress(address)\n    transaction.feePayer = publicKey\n    const { signature } = await provider.signTransaction(transaction)\n    return { publicKey, signature } as Signature\n  }\n\n  signMessage = async (message: string) => {\n    if (!message) throw new Error('Message must be a non-empty string')\n    const provider = await this.getProvider()\n    const address = await this.getAddress()\n    const encodedMsg = new TextEncoder().encode(message)\n    const { signature: sig } = await provider.signMessage(encodedMsg, 'utf8')\n    const signature = Buffer.from(sig).toString('hex')\n    const data = { address, signature, message }\n    return data as SignedMessage\n  }\n\n  verifySignature = async (\n    signature: string,\n    message: string,\n    address?: string,\n  ) => {\n    address = address || (await this.getAddress())\n    const publicKey = account.fromAddress(address)\n    const bufSig = Buffer.from(signature, 'hex')\n    const encodedMsg = new TextEncoder().encode(message)\n    const valid = nacl.sign.detached.verify(\n      encodedMsg,\n      bufSig,\n      publicKey.toBuffer(),\n    )\n    return valid\n  }\n}\n\nexport default CloverWallet\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    val instanceof Buffer\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n","import { create, isIPFS } from 'ipfs-core'\nimport { asyncWait } from 'shared/util'\n\nclass IPFS {\n  private _ipfs: any = async () => {\n    try {\n      if (!window.ipfs) window.ipfs = await create()\n      return window.ipfs\n    } catch (er) {\n      await asyncWait(500)\n      return await this._ipfs()\n    }\n  }\n\n  static isCID = (cid: string | undefined | null): boolean => {\n    try {\n      if (!cid) return false\n      return isIPFS.multihash(cid)\n    } catch (er) {\n      return false\n    }\n  }\n\n  get = async (cid: string) => {\n    if (!IPFS.isCID(cid)) throw new Error('Invalid CID')\n    const ipfs = await this._ipfs()\n    const stream = await ipfs.cat(cid)\n    let raw = ''\n    for await (const chunk of stream) raw += Buffer.from(chunk).toString()\n    const data = JSON.parse(raw)\n    return data\n  }\n\n  set = async (data: object): Promise<string> => {\n    if (!data) throw new Error('Empty data')\n    const raw = JSON.stringify(data)\n    const ipfs = await this._ipfs()\n    const { path: cid } = await ipfs.add(raw)\n    return cid as string\n  }\n}\n\nexport default IPFS\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n\n/**\n * Chain ID\n */\nconst getChainId = () => {\n  switch (net) {\n    case 'devnet':\n      return 103\n    case 'testnet':\n      return 102\n    case 'mainnet':\n      return 101\n    default:\n      return 101\n  }\n}\nexport type ChainId = 101 | 102 | 103\nexport const chainId: ChainId = getChainId()\n","const KEY = 'sentre'\nconst driver = window.sessionStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return false\n  }\n}\n\nconst session = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n\n  clear: (key: string) => {\n    session.set(key, null)\n  },\n}\n\nexport default session\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n"],"names":["SOLVARS","spltAddress","splataAddress","devnet","node","sntrAddress","sntrPoolAddress","swapAddress","taxmanAddress","testnet","mainnet","DEFAULT_APP_ID","process","devApp","url","appId","name","author","email","tags","split","map","tag","trim","description","verified","development","defaultAppId","extra","senreg","staging","production","baseURL","sol","net","register","env","stat","NAME","getAccounts","createAsyncThunk","async","owner","account","Error","splt","window","sentre","ownerPublicKey","value","connection","getTokenAccountsByOwner","programId","spltProgramId","bulk","forEach","pubkey","data","buf","address","toBase58","parseAccountData","getAccount","getState","accounts","getAccountData","upsetAccount","deleteAccount","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","Object","assign","loadVisited","_","wallet","walletAddress","db","PDB","createInstance","visited","getItem","updateVisited","setItem","updateLoading","loading","createStoreHook","RootContext","useRootDispatch","createDispatchHook","useRootSelector","createSelectorHook","store","configureStore","middleware","getDefaultMiddleware","bigintSerializationMiddleware","devTools","reducer","ui","flags","page","mints","pools","search","walkthrough","getMint","force","getMintData","upsetMint","deleteMint","configs","troubleshoot","appIds","Array","isArray","filter","loadRegister","res","fetch","json","er","fetchRegister","installManifest","manifest","includes","newAppIds","push","newRegister","loadPage","updatePage","installApp","uninstallApp","_appId","pdb","dropInstance","getPools","swap","getProgramAccounts","swapProgramId","filters","dataSize","memcmp","bytes","offset","parsePoolData","getPool","getPoolData","upsetPool","setVisible","visible","setValue","setLoading","setDisabled","disabled","getInfix","width","innerWidth","theme","matchMedia","matches","infix","touchable","navigator","maxTouchPoints","visibleActionCenter","visibleInstaller","background","light","dark","setTheme","resize","setVisibleActionCenter","setVisibleInstaller","setBackground","WalkThroughType","type","Default","run","step","setWalkthrough","initializeWindow","GuestWallet","lamports","Lamports","SPLT","Swap","BigInt","openWallet","closeWallet","connectWallet","getAddress","getLamports","updateWallet","disconnectWallet","disconnect","destroyWindow","location","reload","constructor","walletType","getProvider","signTransaction","signature","publicKey","this","rawSignTransaction","transaction","addSignature","signMessage","verifySignature","message","session","BaseWallet","callback","super","_callback","_error","secretKey","_setSecretKey","keypair","confirm","signData","serializeMessage","nacl","Buffer","from","toString","keystore","password","coin98","provider","request","method","feePayer","sig","params","decode","solana","isPhantom","isConnected","connect","Promise","resolve","on","encodedMsg","TextEncoder","encode","bufSig","toBuffer","connected","sign","WalletAdapter","Slope","msg","PublicKey","slopeAddress","solflare","isSolflare","clover_solana","isCloverWallet","appName","prototype","toJSON","serializableCheck","isSerializable","val","obj","proto","getPrototypeOf","isPlainObject","BN","dbName","driver","ipfs","localForage","storeName","instance","clear","all","flat","concat","iterate","key","get","cid","backup","set","restore","IPFS","_ipfs","create","asyncWait","isCID","stream","cat","raw","chunk","JSON","parse","stringify","path","add","isIPFS","KEY","localStorage","convert","e","storage","getNetwork","onSwitchNetwork","chainId","getChainId","sessionStorage","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","resolveQueue","rejectQueue","reject","resolves","length","shift","rejects","error","SingleFlightCache","mapCache","setTimeout","delete","Map","DataLoader","instanceKey","mapInstance","has","newSingleFlight","SingleFlight","requestKey","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","cacheData","isFetch","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","Date","getTime","ms","shortenAddress","num","delimiter","substring","explorer","addressOrTxId","numeric","numbro","randomColor","seed","opacity","hash","Math","floor","random","i","charCodeAt","rgb","fetchCGK","ticket","utils"],"sourceRoot":""}