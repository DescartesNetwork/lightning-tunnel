{"version":3,"file":"static/js/src_os_providers_index_tsx-src_shared_pdb_index_ts-src_shared_storage_ts-src_shared_util_ts.f94e54ef.chunk.js","mappings":"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","sources":["os/providers/ui.provider.tsx","os/providers/pool.provider.tsx","os/providers/wallet.provider.tsx","os/providers/account.provider.tsx","shared/tokenProvider/supplementary.ts","shared/tokenProvider/index.ts","os/providers/mint.provider.tsx","shared/pdb/index.ts","shared/storage.ts","shared/util.ts"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n  CSSProperties,\n  useCallback,\n} from 'react'\n\nimport { ConfigProvider } from 'antd'\n\nimport {\n  useRootSelector,\n  RootState,\n  useRootDispatch,\n  RootDispatch,\n} from 'os/store'\nimport {\n  UIState,\n  setBackground as _setBackground,\n  Background,\n} from 'os/store/ui.reducer'\nimport { ConfigProviderProps } from 'antd/lib/config-provider'\n\nconst Context = createContext<UIProvider>({} as UIProvider)\n\nexport type UIProvider = {\n  ui: UIState\n  setBackground: (\n    ...args: Parameters<typeof _setBackground>\n  ) => Promise<{ background: Background }>\n}\n\n/**\n * UI Context Provider\n */\nconst UIContextProvider = ({\n  children,\n  appId,\n  style = {},\n  antd = false,\n}: {\n  children: ReactNode\n  appId: string\n  style?: CSSProperties\n  antd?: boolean | ConfigProviderProps\n}) => {\n  const dispatch = useRootDispatch<RootDispatch>()\n  const { ui } = useRootSelector((state: RootState) => state)\n  const setBackground = useCallback(\n    async (...args: Parameters<typeof _setBackground>) =>\n      await dispatch(_setBackground(...args)).unwrap(),\n    [dispatch],\n  )\n  const provider = useMemo(() => ({ ui, setBackground }), [ui, setBackground])\n  const configProvider = antd\n    ? {\n        getPopupContainer: () => document.getElementById(appId) as HTMLElement,\n        ...(typeof antd === 'object' ? antd : {}),\n      }\n    : undefined\n\n  return (\n    <Context.Provider value={provider}>\n      <section id={appId} style={{ backgroundColor: 'transparent', ...style }}>\n        {configProvider ? (\n          <ConfigProvider {...configProvider}>{children}</ConfigProvider>\n        ) : (\n          children\n        )}\n      </section>\n    </Context.Provider>\n  )\n}\nexport default UIContextProvider\n\n/**\n * UI Context Consumer\n */\nconst UIComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * UI HOC\n */\nexport const withUI = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <UIComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </UIComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * UI Hook\n */\nexport const useUI = () => {\n  return useContext<UIProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { PoolsState } from 'os/store/pools.reducer'\n\nconst Context = createContext<PoolProvider>({} as PoolProvider)\n\nexport type PoolProvider = {\n  pools: PoolsState\n}\n\n/**\n * Pool Context Provider\n */\nconst PoolContextProvider = ({ children }: { children: ReactNode }) => {\n  const { pools } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ pools }), [pools])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default PoolContextProvider\n\n/**\n * Pool Context Consumer\n */\nconst PoolContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Pool HOC\n */\nexport const withPool = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <PoolContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </PoolContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Pool Hook\n */\nexport const usePool = () => {\n  return useContext<PoolProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { WalletState } from 'os/store/wallet.reducer'\n\nconst Context = createContext<WalletProvider>({} as WalletProvider)\n\nexport type WalletProvider = {\n  wallet: WalletState\n}\n\n/**\n * Wallet Context Provider\n */\nconst WalletContextProvider = ({ children }: { children: ReactNode }) => {\n  const { wallet } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ wallet }), [wallet])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default WalletContextProvider\n\n/**\n * Wallet Context Consumer\n */\nconst WalletContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Wallet HOC\n */\nexport const withWallet = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <WalletContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </WalletContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Wallet Hook\n */\nexport const useWallet = () => {\n  return useContext<WalletProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { AccountsState } from 'os/store/accounts.reducer'\n\nconst Context = createContext<AccountProvider>({} as AccountProvider)\n\nexport type AccountProvider = {\n  accounts: AccountsState\n}\n\n/**\n * Account Context Provider\n */\nconst AccountContextProvider = ({ children }: { children: ReactNode }) => {\n  const { accounts } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ accounts }), [accounts])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default AccountContextProvider\n\n/**\n * Account Context Consumer\n */\nconst AccountContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Account HOC\n */\nexport const withAccount = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <AccountContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </AccountContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Account Hook\n */\nexport const useAccount = () => {\n  return useContext<AccountProvider>(Context)\n}\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for devnet and testnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import lunr, { Index } from 'lunr'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net, chainId, ChainId, Net } from 'shared/runtime'\nimport supplementary, { sntr, sol } from './supplementary'\n\nconsole.log('Debug OS Isolation:', process.env.REACT_APP_ID)\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: Index | undefined\n  readonly chainId: ChainId\n  readonly cluster: Net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, Index]> => {\n    if (this.tokenMap.size && this.engine) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = lunr(function () {\n        this.ref('address')\n        this.field('symbol')\n        this.field('name')\n        tokenList.forEach((doc) => this.add(doc))\n      })\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit = 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    if (!keyword) return []\n    const fuzzy = keyword + '~1'\n    engine.search(fuzzy).forEach(({ ref }) => {\n      if (tokens.findIndex(({ address }) => address === ref) < 0) {\n        const token = tokenMap.get(ref)\n        if (token) tokens.push(token)\n      }\n    })\n    if (limit === 0) return tokens\n    return tokens.slice(0, limit)\n  }\n}\n\nexport default TokenProvider\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  useCallback,\n  ReactNode,\n  useMemo,\n} from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport {\n  useRootDispatch,\n  useRootSelector,\n  RootState,\n  RootDispatch,\n} from 'os/store'\nimport { getMint as _getMint, MintsState } from 'os/store/mints.reducer'\nimport TokenProvider from 'shared/tokenProvider'\n\nconst tokenProvider = new TokenProvider()\nconst Context = createContext<MintProvider>({} as MintProvider)\n\nexport type MintProvider = {\n  mints: MintsState\n  getMint: (...args: Parameters<typeof _getMint>) => Promise<MintsState>\n  getDecimals: (mintAddress: string) => Promise<number>\n  tokenProvider: TokenProvider\n}\n\n/**\n * Mint Context Provider\n */\nconst MintContextProvider = ({ children }: { children: ReactNode }) => {\n  const dispatch = useRootDispatch<RootDispatch>()\n  const { mints, pools } = useRootSelector((state: RootState) => state)\n  const getMint = useCallback(\n    async (...args: Parameters<typeof _getMint>) =>\n      await dispatch(_getMint(...args)).unwrap(),\n    [dispatch],\n  )\n  const getDecimals = useCallback(\n    async (mintAddress: string) => {\n      if (!account.isAddress(mintAddress))\n        throw new Error('Invalid mint address')\n      // If the token is in token provider, return its decimals\n      const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n      if (tokenInfo?.decimals !== undefined) return tokenInfo.decimals\n      // If the token is lp, return 9 as default\n      const index = Object.values(pools).findIndex(\n        ({ mint_lpt }) => mint_lpt === mintAddress,\n      )\n      if (index >= 0) return 9\n      // Fetch from the clustters\n      const mintData = await getMint({ address: mintAddress })\n      if (mintData[mintAddress]?.decimals) return mintData[mintAddress].decimals\n      throw new Error('Cannot find mint decimals')\n    },\n    [getMint, pools],\n  )\n  const provider = useMemo(\n    () => ({ mints, getMint, getDecimals, tokenProvider }),\n    [mints, getMint, getDecimals],\n  )\n  // Context provider\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default MintContextProvider\n\n/**\n * Mint Context Consumer\n */\nconst MintContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Mint HOC\n */\nexport const withMint = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <MintContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </MintContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Mint Hook\n */\nexport const useMint = () => {\n  return useContext<MintProvider>(Context)\n}\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://solscan.io/account/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://solscan.io/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n\n/**\n * Randomly choose an element in the input array\n * @param arr - Original array of elements\n * @returns\n */\nexport const randChoose = <T>(arr: T[]): T => {\n  const rand = Math.floor(Math.random() * arr.length)\n  return arr[rand]\n}\n\n/**\n * Randomize a subarray in the input array with a specific number of elements\n * @param arr - Original array of elements\n * @param num - Number of elements in randomized subarray\n * @returns\n */\nexport const randElements = <T>(arr: T[], num: number): T[] => {\n  if (arr.length < num) return [...arr]\n  const re: T[] = []\n  while (re.length < num) {\n    const el = randChoose(arr)\n    if (!re.includes(el)) re.push(el)\n  }\n  return re\n}\n"],"names":["Context","createContext","children","appId","style","antd","dispatch","useRootDispatch","ui","useRootSelector","state","setBackground","useCallback","async","_setBackground","unwrap","provider","useMemo","configProvider","getPopupContainer","document","getElementById","undefined","Provider","value","id","backgroundColor","ConfigProvider","UIComsumer","Consumer","Children","child","cloneElement","withUI","WrappedComponent","HOC","Component","render","forwardedRef","rest","this","props","ref","forwardRef","useUI","useContext","pools","PoolContextComsumer","withPool","usePool","wallet","WalletContextComsumer","withWallet","useWallet","accounts","AccountContextComsumer","withAccount","useAccount","sol","chainId","symbol","name","address","decimals","extensions","coingeckoId","logoURI","sntr","console","log","process","tokenProvider","constructor","tokenMap","engine","cluster","loading","queue","_init","size","Promise","push","resolve","tokenList","TokenListProvider","filterByChainId","getList","concat","supplementary","forEach","token","set","lunr","field","doc","add","length","shift","all","Array","from","values","findByAddress","get","addr","find","keyword","limit","tokens","fuzzy","search","findIndex","slice","Map","net","mints","getMint","_getMint","getDecimals","account","mintAddress","Error","tokenInfo","Object","mint_lpt","mintData","MintContextComsumer","withMint","useMint","PDB","walletAddress","dbName","driver","ipfs","createInstance","localForage","storeName","dropInstance","instance","clear","data","appIds","getItem","flat","iterate","key","fetch","cid","backup","restore","setItem","IPFS","createPDB","walletArress","KEY","window","localStorage","convert","JSON","parse","e","storage","stringify","asyncWait","ms","setTimeout","shortenAddress","num","delimiter","substring","explorer","addressOrTxId","numeric","numbro","randomColor","seed","opacity","hash","Math","floor","random","i","charCodeAt","rgb","fetchCGK","ticket","DataLoader","utils","randChoose","arr"],"sourceRoot":""}